/*
 * Handles various input types and processes them into corresponding web content:
 *
 * Input:
 * - `ShortcutInput`: Any web-related types such as "Article", "Safari web page", or "URL".
 * - If input is not provided, it will prompt the user for input.
 *
 * Output:
 * - If the input type is compatible with text extraction (e.g., Article, Safari web page):
 *   Outputs all extracted text, including the title.
 * - If the input type is compatible with articles (e.g., URL):
 *   Outputs the body of the article.
 * - Otherwise:
 *   Outputs .webarchive file.
 */
#define color blue

const shortcut_input_type = typeOf(ShortcutInput)

const text_compatible_type = "Article, Safari web page" // a.k.a Safari Reader
if text_compatible_type contains shortcut_input_type {
	// The `getText` action is compatible with many types of input.
	// Itâ€™s faster. It extracts all the text, including the title.
	// Alternative: `getArticleDetail(ShortcutInput, "Body")` which excludes the title, etc.
	const text = getText(ShortcutInput)
	mustOutput(text, text)
}

const article_compatible_type = "Safari web page, URL"
if article_compatible_type contains shortcut_input_type {
	const article = getArticle(ShortcutInput)
	mustOutput(article['Body'], article['Body'])
}

// TODO: a smarter criteria to decide if a URL is text_compatible_type or article_compatible_type. 
// iCloud or YouTube links should reach here. They are not compatible with Article.

if !ShortcutInput {
	@other_type_input = "{Ask}"
} else {
	@other_type_input = ShortcutInput
}
const contents_of_web_page = getWebpageContents(other_type_input)
output(contents_of_web_page)

// Below is unreachable code.
// Fetch HTML file (Rich text), equivalent to `getWebpageContents`, but without redirect.
downloadURL(ShortcutInput)
