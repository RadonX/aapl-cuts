/*
    Converts various input types to text.

    Input:
    - Any type of data.

    Output:
    - If the input is a URL (plain text URL is also accepted), the shortcut fetches web article of the URL.
    - Otherwise, use the native getText() action to convert the input to text.

    Dependencies: [url_or_text.shortcut, web_content.shortcut]
*/
#define noinput askfor text
#define color darkgray
#define glyph printer
#define version 17
#include 'app_store/Actions.cherri'

// TODO: Does this action handle multiple URLs?

const input_type = typeOf(ShortcutInput)

// actionsGetNumber is not a native action. 
// For some reason, the assignment of the number debug_level needs to in the following order to work correctly. 
const action_debug_level = actionsGetNumber("debug_level")
@debug_level: number
@debug_level = action_debug_level
// and there needs to be another line after the @debug_level variable.
if debug_level > 0 {
    showNotification("{input_type}: {ShortcutInput}", "", false, ShortcutInput)
}

if input_type == "Text" {
    const url_or_text_result = run("url_or_text", ShortcutInput)
    const url_or_text_type = typeOf(url_or_text_result)
    
    if url_or_text_type == "URL" {
        @some_url = url_or_text_result
    } 
    output(ShortcutInput)
} else if input_type == "URL" {
    @some_url = ShortcutInput
} else {
    if debug_level > 1 {
        showNotification("Converting {input_type} to text", input_type)
    }
    
    // web_content.shortcut provides special handling for web artifacts.
    // This general shortcut just uses the basic getText action.
    const text = getText(ShortcutInput)
    mustOutput(text, text)
}

const article = getArticle(some_url)
output(article['Body'])
// The code below is unreachable.
// Alternative: Use web_content.shortcut only when it has special URL handling.
const web_page = run("web_content", some_url)
output(web_page)
